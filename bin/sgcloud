#!/usr/bin/env node

'use strict'

const caporal = require('caporal')
const semver = require('semver')
const updateNotifier = require('update-notifier')

// set version (includes version command)
const pkg = require('../package.json')

// check node version
if (!semver.satisfies(process.version, pkg.engines.node)) {
  console.error(`You have an outdated node version (${process.version}). Please upgrade to the newest version`)
  process.exit(1)
}

const notifier = updateNotifier({ pkg, updateCheckInterval: 0 })
notifier.notify()

if (notifier.update) {
  process.exit(0)
}

caporal.version(pkg.version)

// Get SIGINT on windows (for CYGWIN and CMD)
if (/^win/.test(process.platform)) {
  const rl = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  })

  rl.on('SIGINT', () => {
    process.emit('SIGINT')
  })
}

// load all custom actions
const actions = require('../')
Object.keys(actions).forEach(a => actions[a].register(caporal))

// activate argument parsing
caporal.parse(process.argv)
